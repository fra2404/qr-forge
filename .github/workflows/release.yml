name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: QR Forge ${{ github.ref }}
        body: |
          ## Features
          - CLI QR code generator with multiple output formats
          - GUI application with real-time preview
          - Support for PNG, SVG, JPEG formats
          - Customizable colors and sizes
          - macOS app bundle included
          
          ## Downloads
          - **qr-forge-cli-linux.tar.gz**: Linux CLI binary
          - **qr-forge-cli-windows.zip**: Windows CLI binary  
          - **qr-forge-cli-macos.tar.gz**: macOS CLI binary
          - **QR-Forge-GUI-macos.dmg**: macOS GUI application
          - **qr-forge-gui-linux.tar.gz**: Linux GUI binary
          - **qr-forge-gui-windows.zip**: Windows GUI binary
        draft: false
        prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev
    
    - name: Build CLI
      run: cargo build --release --bin qr-forge --target ${{ matrix.target }}
    
    - name: Build GUI
      run: cargo build --release --bin qr-forge-gui --target ${{ matrix.target }}
    
    - name: Create CLI archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p dist-cli
        cp target/${{ matrix.target }}/release/qr-forge dist-cli/
        cp README.md LICENSE dist-cli/
        tar -czf qr-forge-cli-${{ matrix.name }}.tar.gz -C dist-cli .
    
    - name: Create CLI archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir dist-cli
        copy target\${{ matrix.target }}\release\qr-forge.exe dist-cli\
        copy README.md dist-cli\
        copy LICENSE dist-cli\
        powershell Compress-Archive -Path dist-cli\* -DestinationPath qr-forge-cli-${{ matrix.name }}.zip
    
    - name: Create GUI archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p dist-gui
        cp target/${{ matrix.target }}/release/qr-forge-gui dist-gui/
        cp README.md LICENSE dist-gui/
        tar -czf qr-forge-gui-${{ matrix.name }}.tar.gz -C dist-gui .
    
    - name: Create GUI archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir dist-gui
        copy target\${{ matrix.target }}\release\qr-forge-gui.exe dist-gui\
        copy README.md dist-gui\
        copy LICENSE dist-gui\
        powershell Compress-Archive -Path dist-gui\* -DestinationPath qr-forge-gui-${{ matrix.name }}.zip
    
    - name: Create macOS App Bundle
      if: matrix.os == 'macos-latest'
      run: |
        chmod +x create_icon.sh build_app.sh
        ./create_icon.sh
        ./build_app.sh
        hdiutil create -volname "QR Forge" -srcfolder "QR Forge.app" -ov -format UDZO QR-Forge-GUI-macos.dmg
    
    - name: Upload CLI Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./qr-forge-cli-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        asset_name: qr-forge-cli-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}
    
    - name: Upload GUI Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./qr-forge-gui-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        asset_name: qr-forge-gui-${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}
    
    - name: Upload macOS DMG
      if: matrix.os == 'macos-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./QR-Forge-GUI-macos.dmg
        asset_name: QR-Forge-GUI-macos.dmg
        asset_content_type: application/x-apple-diskimage
